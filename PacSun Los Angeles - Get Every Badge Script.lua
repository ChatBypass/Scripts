--[[
 .____                  ________ ___.    _____                           __                
 |    |    __ _______   \_____  \\_ |___/ ____\_ __  ______ ____ _____ _/  |_  ___________ 
 |    |   |  |  \__  \   /   |   \| __ \   __\  |  \/  ___// ___\\__  \\   __\/  _ \_  __ \
 |    |___|  |  // __ \_/    |    \ \_\ \  | |  |  /\___ \\  \___ / __ \|  | (  <_> )  | \/
 |_______ \____/(____  /\_______  /___  /__| |____//____  >\___  >____  /__|  \____/|__|   
         \/          \/         \/    \/                \/     \/     \/                   
          \_Welcome to LuaObfuscator.com   (Alpha 0.2.6) ~  Much Love, Ferib 

]]--

local StrToNumber=tonumber;local Byte=string.byte;local Char=string.char;local Sub=string.sub;local Subg=string.gsub;local Rep=string.rep;local Concat=table.concat;local Insert=table.insert;local LDExp=math.ldexp;local GetFEnv=getfenv or function()return _ENV;end ;local Setmetatable=setmetatable;local PCall=pcall;local Select=select;local Unpack=unpack or table.unpack ;local ToNumber=tonumber;local function VMCall(ByteString,vmenv,...)local DIP=1;local repeatNext;ByteString=Subg(Sub(ByteString,5),"..",function(byte)if (Byte(byte,2)==79) then repeatNext=StrToNumber(Sub(byte,1,1));return "";else local a=Char(StrToNumber(byte,16));if repeatNext then local b=Rep(a,repeatNext);repeatNext=nil;return b;else return a;end end end);local function gBit(Bit,Start,End)if End then local Res=(Bit/(2^(Start-1)))%(2^(((End-1) -(Start-1)) + 1)) ;return Res-(Res%1) ;else local Plc=2^(Start-1) ;return (((Bit%(Plc + Plc))>=Plc) and 1) or 0 ;end end local function gBits8()local a=Byte(ByteString,DIP,DIP);DIP=DIP + 1 ;return a;end local function gBits16()local a,b=Byte(ByteString,DIP,DIP + 2 );DIP=DIP + 2 ;return (b * 256) + a ;end local function gBits32()local a,b,c,d=Byte(ByteString,DIP,DIP + 3 );DIP=DIP + 4 ;return (d * 16777216) + (c * 65536) + (b * 256) + a ;end local function gFloat()local Left=gBits32();local Right=gBits32();local IsNormal=1;local Mantissa=(gBit(Right,1,20) * (2^32)) + Left ;local Exponent=gBit(Right,21,31);local Sign=((gBit(Right,32)==1) and  -1) or 1 ;if (Exponent==0) then if (Mantissa==0) then return Sign * 0 ;else Exponent=1;IsNormal=0;end elseif (Exponent==2047) then return ((Mantissa==0) and (Sign * (1/0))) or (Sign * NaN) ;end return LDExp(Sign,Exponent-1023 ) * (IsNormal + (Mantissa/(2^52))) ;end local function gString(Len)local Str;if  not Len then Len=gBits32();if (Len==0) then return "";end end Str=Sub(ByteString,DIP,(DIP + Len) -1 );DIP=DIP + Len ;local FStr={};for Idx=1, #Str do FStr[Idx]=Char(Byte(Sub(Str,Idx,Idx)));end return Concat(FStr);end local gInt=gBits32;local function _R(...)return {...},Select("#",...);end local function Deserialize()local Instrs={};local Functions={};local Lines={};local Chunk={Instrs,Functions,nil,Lines};local ConstCount=gBits32();local Consts={};for Idx=1,ConstCount do local Type=gBits8();local Cons;if (Type==1) then Cons=gBits8()~=0 ;elseif (Type==2) then Cons=gFloat();elseif (Type==3) then Cons=gString();end Consts[Idx]=Cons;end Chunk[3]=gBits8();for Idx=1,gBits32() do local Descriptor=gBits8();if (gBit(Descriptor,1,1)==0) then local Type=gBit(Descriptor,2,3);local Mask=gBit(Descriptor,4,6);local Inst={gBits16(),gBits16(),nil,nil};if (Type==0) then Inst[3]=gBits16();Inst[4]=gBits16();elseif (Type==1) then Inst[3]=gBits32();elseif (Type==2) then Inst[3]=gBits32() -(2^16) ;elseif (Type==3) then Inst[3]=gBits32() -(2^16) ;Inst[4]=gBits16();end if (gBit(Mask,1,1)==1) then Inst[2]=Consts[Inst[2]];end if (gBit(Mask,2,2)==1) then Inst[3]=Consts[Inst[3]];end if (gBit(Mask,3,3)==1) then Inst[4]=Consts[Inst[4]];end Instrs[Idx]=Inst;end end for Idx=1,gBits32() do Functions[Idx-1 ]=Deserialize();end for Idx=1,gBits32() do Lines[Idx]=gBits32();end return Chunk;end local function Wrap(Chunk,Upvalues,Env)local Instr=Chunk[1];local Proto=Chunk[2];local Params=Chunk[3];return function(...)local VIP=1;local Top= -1;local Args={...};local PCount=Select("#",...) -1 ;local function Loop()local Instr=Instr;local Proto=Proto;local Params=Params;local _R=_R;local Vararg={};local Lupvals={};local Stk={};for Idx=0,PCount do if (Idx>=Params) then Vararg[Idx-Params ]=Args[Idx + 1 ];else Stk[Idx]=Args[Idx + 1 ];end end local Varargsz=(PCount-Params) + 1 ;local Inst;local Enum;while true do Inst=Instr[VIP];Enum=Inst[1];if (Enum<=2) then if (Enum<=0) then local A=Inst[2];Stk[A](Unpack(Stk,A + 1 ,Inst[3]));elseif (Enum>1) then Stk[Inst[2]]=Stk[Inst[3]][Inst[4]];else local A=Inst[2];local B=Stk[Inst[3]];Stk[A + 1 ]=B;Stk[A]=B[Inst[4]];end elseif (Enum<=4) then if (Enum==3) then local A=Inst[2];Stk[A]=Stk[A](Unpack(Stk,A + 1 ,Inst[3]));else do return;end end elseif (Enum==5) then Stk[Inst[2]]=Inst[3];else Stk[Inst[2]]=Env[Inst[3]];end VIP=VIP + 1 ;end end A,B=_R(PCall(Loop));if  not A[1] then local line=Chunk[4][VIP] or "?" ;error("Script error at ["   .. line   .. "]:"   .. A[2] );else return Unpack(A,2,B);end end;end return Wrap(Deserialize(),{},vmenv)(...);end VMCall("LOL!143O0003043O0067616D65030A3O004765745365727669636503113O005265706C69636174656453746F7261676503163O004261646765735F556E6C6F636B426164676546756E63030C3O00496E766F6B65536572766572023O00BF78CFDF41022O00407FD0BEDF41023O007ED0BEDF41022O004075D0BEDF41023O0074D0BEDF41023O0073D0BEDF41022O00C066D0BEDF41022O00C065D0BEDF41022O00C061D0BEDF41023O0060D0BEDF41023O004ED0BEDF41022O008076D0BEDF41022O00C01588F2DF41022O00C00F88F2DF41022O00C00C88F2DF4100793O0012063O00013O0020015O0002001205000200034O00033O000200020020025O00040020015O0005001205000200068O000200010012063O00013O0020015O0002001205000200034O00033O000200020020025O00040020015O0005001205000200078O000200010012063O00013O0020015O0002001205000200034O00033O000200020020025O00040020015O0005001205000200088O000200010012063O00013O0020015O0002001205000200034O00033O000200020020025O00040020015O0005001205000200098O000200010012063O00013O0020015O0002001205000200034O00033O000200020020025O00040020015O00050012050002000A8O000200010012063O00013O0020015O0002001205000200034O00033O000200020020025O00040020015O00050012050002000B8O000200010012063O00013O0020015O0002001205000200034O00033O000200020020025O00040020015O00050012050002000C8O000200010012063O00013O0020015O0002001205000200034O00033O000200020020025O00040020015O00050012050002000D8O000200010012063O00013O0020015O0002001205000200034O00033O000200020020025O00040020015O00050012050002000E8O000200010012063O00013O0020015O0002001205000200034O00033O000200020020025O00040020015O00050012050002000F8O000200010012063O00013O0020015O0002001205000200034O00033O000200020020025O00040020015O0005001205000200108O000200010012063O00013O0020015O0002001205000200034O00033O000200020020025O00040020015O0005001205000200118O000200010012063O00013O0020015O0002001205000200034O00033O000200020020025O00040020015O0005001205000200128O000200010012063O00013O0020015O0002001205000200034O00033O000200020020025O00040020015O0005001205000200138O000200010012063O00013O0020015O0002001205000200034O00033O000200020020025O00040020015O0005001205000200148O000200012O00043O00017O00793O00013O00013O00013O00013O00013O00013O00013O00013O00023O00023O00023O00023O00023O00023O00023O00023O00033O00033O00033O00033O00033O00033O00033O00033O00043O00043O00043O00043O00043O00043O00043O00043O00053O00053O00053O00053O00053O00053O00053O00053O00063O00063O00063O00063O00063O00063O00063O00063O00073O00073O00073O00073O00073O00073O00073O00073O00083O00083O00083O00083O00083O00083O00083O00083O00093O00093O00093O00093O00093O00093O00093O00093O000A3O000A3O000A3O000A3O000A3O000A3O000A3O000A3O000B3O000B3O000B3O000B3O000B3O000B3O000B3O000B3O000C3O000C3O000C3O000C3O000C3O000C3O000C3O000C3O000D3O000D3O000D3O000D3O000D3O000D3O000D3O000D3O000E3O000E3O000E3O000E3O000E3O000E3O000E3O000E3O000F3O000F3O000F3O000F3O000F3O000F3O000F3O000F3O000F3O00",GetFEnv(),...);
--Made by Tritemis
